import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'io.github.ladysnake.chenille' version '0.7.0'
	id 'io.github.juuxel.loom-quiltflower' version "1.6.0"
	id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	dummy
}

chenille {
	configureTestmod {
		withBaseTestRuns()
		withDependencyConfiguration()
	}

	license = 'LGPL'
	javaVersion = 17
}

repositories {
	mavenCentral()
	mavenLocal()
	chenille.repositories {
		cursemaven()
		ladysnake()
		lucko()
		jitpack()
		terraformers()
		shedaniel()
	}
	maven {
		url = "https://maven.siphalor.de/"
		content {
			includeGroup 'de.siphalor'
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modIncludeImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}"
	modIncludeImplementation ("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")
	modIncludeImplementation "me.lucko:fabric-permissions-api:${fpa_version}"

	compileOnly "com.demonwav.mcdev:annotations:1.0"

	modLocalImplementation "curse.maven:BackSlot-402739:${backslot_version}"
	modLocalRuntime ("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") { transitive = false }

	modLocalRuntime "com.terraformersmc:modmenu:${modmenu_version}"
	modCompileOnly modLocalRuntime("io.github.ladysnake:elmendorf:${elmendorf_version}")

	testImplementation 'junit:junit:4.13'
	testImplementation 'org.mockito:mockito-core:3.+'

	testmodImplementation sourceSets.main.output
	annotationProcessor(sourceSets.dummy.output)
}

test {
	useJUnit()

	maxHeapSize = '1G'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	withSourcesJar()
}

jar {
	from("COPYING.LESSER") {
		rename { "LICENSE_${project.archivesBaseName}"}
	}
}

remapJar {
	addNestedDependencies.set(false)
}

task standaloneJar(type: Jar, dependsOn: project.classes) {
	from sourceSets.main.output
	archiveClassifier.set('standalone-dev')
}

task remapStandaloneJar(type: RemapJarTask, dependsOn: project.standaloneJar) {
	archiveClassifier.set('standalone')
	inputFile.set(standaloneJar.archiveFile)
	addNestedDependencies.set(true)
}

assemble.dependsOn(remapStandaloneJar)

chenille {
	configurePublishing {
		mainArtifact = remapStandaloneJar
		withArtifactory()
		withCurseforgeRelease()
		withGithubRelease()
	}
}