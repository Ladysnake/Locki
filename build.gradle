import net.fabricmc.loom.task.RemapJarTask

import java.time.Year

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'org.cadixdev.licenser' version '0.6.0'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.jfrog.artifactory' version '4.21.0'
	id 'org.ajoberstar.grgit' version '3.1.1'
	id 'com.github.breadmoirai.github-release' version '2.2.12'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

repositories {
	mavenCentral()
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}
	maven {
		url = 'https://oss.sonatype.org/content/repositories/snapshots'
		content {
			includeGroup 'me.lucko'
		}
	}
	maven {
		url = 'https://maven.kotlindiscord.com/repository/terraformers/'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
	maven {
		url = "https://maven.siphalor.de/"
		content {
			includeGroup 'de.siphalor'
		}
	}
	maven {
		url = "https://maven.shedaniel.me/"
		content {
			includeGroupByRegex 'me\\.shedaniel\\..*'
			includeGroup 'me.sargunvohra.mcmods'
		}
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = 'JitPack'
		url = 'https://jitpack.io'
		content {
			includeGroupByRegex '(io|com)\\.github\\..*'
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cca_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cca_version}"
	modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cca_version}")
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cca_version}"
	modImplementation "me.lucko:fabric-permissions-api:${fpa_version}"
	include "me.lucko:fabric-permissions-api:${fpa_version}"

	modCompileOnly "curse.maven:BackSlot-402739:${backslot_version}"
	modRuntime "curse.maven:BackSlot-402739:${backslot_version}"
	modRuntime "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"

	compileOnly "com.demonwav.mcdev:annotations:1.0"
	modRuntime 'com.terraformersmc:modmenu:2.0.0-beta.4'

	testImplementation 'junit:junit:4.13'
	testImplementation 'org.mockito:mockito-core:3.+'

	testmodImplementation sourceSets.main.output
}

test {
	useJUnit()

	maxHeapSize = '1G'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release.set(16)
}


java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("COPYING.LESSER") {
		rename { "LICENSE_${project.archivesBaseName}"}
	}
}

task remapLibJar(type: RemapJarTask, dependsOn: project.jar) {
	archiveClassifier.set('lib')
	input.set(jar.archiveFile)
	addNestedDependencies.set(false)
}

build.dependsOn(remapLibJar)

license {
	header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

	include "**/*.java"

	newLine.set(false) // Disables the empty line between the header and package name
	//ignoreFailures = true //Ignore failures and only print a warning on license violations

	//export variables
	ext {
		year = Year.now()
		projectDisplayName = project.display_name
		projectOwners = rootProject.owners
		if (project.license_header.contains('GPL')) {
			if (!project.hasProperty("gpl_version")) {
				throw new RuntimeException("GPL version needs to be specified through the 'gpl_version' property")
			}
			gplVersion = project.gpl_version
		}
	}
}

apply from: 'release.gradle'